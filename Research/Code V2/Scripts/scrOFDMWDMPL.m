% scrOFDMWDMPL
% script to plot data generated by scrOFDMWDMPL
function scrOFDMWDMPL(dataFile)
if (exist('hWB','var') && ishandle(hWB))
    delete(hWB);
end
if ~exist('dataFile','var')
    error('Data file not specified');
end
close all;
clearvars -except dataFile;
clc;
load(dataFile);                                                             % LOAD DATA

% DEFAULT COSMETIC SETTINGS
dlinelw = get(0,'DefaultLineLineWidth');
set(0,'DefaultLineLineWidth',2);
daxesfontname = get(0,'DefaultAxesFontName');
set(0,'DefaultAxesFontName','Helvetica');
% daxesfontsize = get(0,'DefaultAxesFontSize');
% set(0,'DefaultAxesFontSize',16);
dfigvis = get(0,'DefaultFigureVisible');
set(0,'DefaultFigureVisible','On');
dfigppm = get(0,'DefaultFigurePaperPositionMode');
set(0,'DefaultFigurePaperPositionMode','Manual');
dfigpu = get(0,'DefaultFigurePaperUnits');
set(0,'DefaultFigurePaperUnits','Inches');
dfigpp = get(0,'DefaultFigurePaperPosition');
set(0,'DefaultFigurePaperPosition',[0 0 11 8.5]);
dlinems = get(0,'DefaultLineMarkerSize');
set(0,'DefaultLineMarkerSize',6);
FIGTITLE = 'Off';


% Wait Bar to show progress
hWB = waitbar(0,'Plotting Results: 0.00% done','Name',WBTITLE,'Visible','Off');
set(hWB,'Position',[WBX WBY WBW WBH],'Visible','On');

%% PLOT
% PLOT Configs
PLOTDMIN = 5;
PLACOLC = 'm'; PLACOLS = '-'; PLACOMK = 'o';
PLDCOLC = 'c'; PLDCOLS = '-'; PLDCOMK = 'd';
PLTXLCS = {'r';'g';'b'}; PLTXLSS = {'--';'-.';':'}; PLTXMKS = {'>';'s';'*'};
% Figure CCT config
FIGCCT = figure('Name',sprintf('SPD vs CCT'),'NumberTitle',FIGTITLE);
FIGCCTPLNR = power(2,floor(log2(LENCCTPL)/2));
FIGCCTPLNC = power(2,ceil(log2(LENCCTPL)/2));
FIGLDAMIN = 400; FIGLDAMAX = 800;
iTPL = 1;
% Figure BER vs SNR config
FIGBER = zeros(1,LENCCT);
FIGBERPLNR = power(2,ceil(log2(LENOFDMTYPES)/2));
FIGBERPLNC = power(2,floor(log2(LENOFDMTYPES)/2));
FIGBERXMIN = RNGSNRMIN; FIGBERXMAX = RNGSNRMAX;
FIGBERYMIN = 0.9*BERTH; FIGBERYMAX = 1;
FIGBERLGD = {};
HBERLGD = [];

TOTALLOOPS = LENCCT*LENOFDMTYPES*LENMODNSC+3;
LOOPCOUNT = 0;
try
for iT = 1:LENCCT                                                           % LOOP START CCT
    if RNGCCT(iT) == RNGCCTPL(iTPL)                                         % If CCT selected for plot
        figure(FIGCCT);
        subplot(FIGCCTPLNR,FIGCCTPLNC,iTPL);
        [x,y] = planckXY(RNGCCT(iT)); 
%         fprintf('x=%0.2f y=%0.2f\n',x,y);
        [S,R,G,B,tr,tg,tb] = RGB.getPSD(x,y);                               % Get PSDs at CCT
        plot(R.npsd.X,(tr/S.npsd.Ymax)*R.npsd.Y,PLTXLCS{1});                % Plot RED SPD
        hold on;
        plot(G.npsd.X,(tg/S.npsd.Ymax)*G.npsd.Y,PLTXLCS{2});                % Plot Green SPD
        plot(B.npsd.X,(tb/S.npsd.Ymax)*B.npsd.Y,PLTXLCS{3});                % Plot Blue SPD
        axis([FIGLDAMIN FIGLDAMAX 0 1]);
        xlabel('Wavelength (nm)');
        ylabel('Normalized SPD');
        title(sprintf('CCT = %dK, [x,y] = [%0.2f,%0.2f]',RNGCCTPL(iTPL),x,y));
        iTPL = iTPL+1;
    end                                                                     % LOOP STOP CCT

    for iNSC = 1:LENMODNSC                                                  % LOOP START NSC
        FIGBER(iT,iNSC) = figure('Name',sprintf('BER vs SNR, CCT = %dK, Nsc = %d, Illumination = %dlx',RNGCCT(iT),RNGMODNSC(iNSC),LKILL),'NumberTitle',FIGTITLE);
        for iOf = 1:LENOFDMTYPES                                            % LOOP START OFDM types
            ofdmType = lower(RNGOFDMTYPES{iOf});
            switch lower(ofdmType)
                case 'acoofdm'
                    STRTITLE = sprintf('ACO-OFDM, CCT = %dK, N_{sc} = %d, Illumination = %dlx',RNGCCT(iT),RNGMODNSC(iNSC),LKILL);
                    plLC = PLACOLC; plLS = PLACOLS; plMK = PLACOMK; plLGD = 'ACO';
                case 'dcoofdm'
                    STRTITLE = sprintf('DCO-OFDM, CCT = %dK, N_{sc} = %d, Illumination = %dlx',RNGCCT(iT),RNGMODNSC(iNSC),LKILL);
                    plLC = PLDCOLC; plLS = PLDCOLS; plMK = PLDCOMK; plLGD = 'DCO';
            end
            figure(FIGBER(iT,iNSC));
            subplot(FIGBERPLNR,FIGBERPLNC,iOf);
            [Xp,Yp] = getCleanPoints(RNGSNRDB(:,iT,iNSC,iOf),log10(sum(BER(:,:,iT,iNSC,iOf),1)/NTX),PLOTDMIN);  % Get points well spaced out
            semilogy(Xp,power(10,Yp),[plLC plMK]);                          % Semilog AVG BER vs SNR Marker
            hold on;
            semilogy(RNGSNRDB(:,iT,iNSC,iOf),sum(BER(:,:,iT,iNSC,iOf),1)/NTX,[plLC plLS]);  % Semilog AVG BER vs SNR
            HBERLGD(1,iNSC,iOf) = plot(nan,nan,[plLC plLS plMK]);  % Semilog AVG BER vs SNR (get line style)
            
            axis([FIGBERXMIN FIGBERXMAX FIGBERYMIN FIGBERYMAX]);
            for iTx = 1:NTX
                [Xp,Yp] = getCleanPoints(RNGSNRDB(:,iT,iNSC,iOf),log10(BER(iTx,:,iT,iNSC,iOf)),PLOTDMIN);   % Get points well spaced out
                semilogy(Xp,power(10,Yp),[PLTXLCS{iTx} PLTXMKS{iTx}]); % Semilog TX BER vs SNR Markers
                semilogy(RNGSNRDB(:,iT,iNSC,iOf),BER(iTx,:,iT,iNSC,iOf),[PLTXLCS{iTx} PLTXLSS{iTx}]); % Semilog TX BER vs SNR
                HBERLGD(1+iTx,iNSC,iOf) = plot(nan,nan,[PLTXLCS{iTx} PLTXLSS{iTx} PLTXMKS{iTx}]);  % Semilog TX BER vs SNR Line Style legend
            end
            grid on;
            FIGBERLGD(:,iNSC,iOf) = {plLGD;[plLGD ':Red'];[plLGD ':Green'];[plLGD ':Blue']};
            legend(gca,HBERLGD(:,iNSC,iOf),FIGBERLGD(:,iNSC,iOf));
            xlabel('SNR^{tx}_{avg}');
            ylabel('BER');
            title(STRTITLE);
            
            % Update Wait bar
            LOOPCOUNT = LOOPCOUNT+1;
            PROGRESS = LOOPCOUNT/TOTALLOOPS;
            waitbar(PROGRESS,hWB,sprintf('Plotting Results: %0.2f%% done...',PROGRESS*100));
        end % OFDM                                                          % LOOP STOP OFDM types
    end % NSC                                                               % LOOP STOP NSC
end % CCT                                                                   % LOOP STOP CCT

% Figure filter responses
FIGFILT = figure('Name',sprintf('Filter Transmission'),'NumberTitle',FIGTITLE);
plot(Rrx.sensor.filter.X,Rrx.sensor.filter.Y,'r');
hold on;
plot(Grx.sensor.filter.X,Grx.sensor.filter.Y,'g');
plot(Brx.sensor.filter.X,Brx.sensor.filter.Y,'b');
axis([FIGLDAMIN FIGLDAMAX 0 1]);
xlabel('Wavelength (nm)');
ylabel('Transmission');
title('Filter Transmission');
LOOPCOUNT = LOOPCOUNT+1;
PROGRESS = LOOPCOUNT/TOTALLOOPS;
waitbar(PROGRESS,hWB,sprintf('Plotting Results: %0.2f%% done...',PROGRESS*100));

% Figure receiver responsivisities
FIGRESP = figure('Name',sprintf('Receiver Responsivity'),'NumberTitle',FIGTITLE);
plot(Rrx.sensor.responsivity.X,Rrx.sensor.responsivity.Y,'r--');
hold on;
plot(Grx.sensor.responsivity.X,Grx.sensor.responsivity.Y,'g:');
plot(Brx.sensor.responsivity.X,Brx.sensor.responsivity.Y,'b-.');
axis([FIGLDAMIN FIGLDAMAX 0 1]);
xlabel('Wavelength (nm)');
ylabel('Responsivity (A.W^{-1})');
title('Receiver responsivity');
LOOPCOUNT = LOOPCOUNT+1;
PROGRESS = LOOPCOUNT/TOTALLOOPS;
waitbar(PROGRESS,hWB,sprintf('Plotting Results: %0.2f%% done...',PROGRESS*100));

% Plot illuminance
room.drawIlluminance;
FIGILL = gcf;
set(FIGILL,'Name',sprintf('Illuminance'),'NumberTitle',FIGTITLE);
LOOPCOUNT = LOOPCOUNT+1;
PROGRESS = LOOPCOUNT/TOTALLOOPS;
waitbar(PROGRESS,hWB,sprintf('Plotting Results: %0.2f%% done...',PROGRESS*100));

%% Save Figures
LOOPCOUNT = 0;
TOTALLOOPS = 4+2*LENCCT;
if fSAVEALL
    % Save Illumination
    f = figure(FIGILL);
    fname = [ctDirRes STRPREFIX 'Illumination' CHARIDXARCHIVE];
    saveas(f,[fname '.png'],'png');
    saveas(f,[fname '.fig'],'fig');
    saveas(f,[fname '.eps'],'epsc');
    LOOPCOUNT = LOOPCOUNT+1;
    PROGRESS = LOOPCOUNT/TOTALLOOPS;
    waitbar(PROGRESS,hWB,sprintf('Saving Results: %0.2f%% done...',PROGRESS*100));
    
    % Save Filter Trasmissions
    f = figure(FIGFILT);
    fname = [ctDirRes STRPREFIX 'FiltTrans' CHARIDXARCHIVE];
    saveas(f,[fname '.png'],'png');
    saveas(f,[fname '.fig'],'fig');
    saveas(f,[fname '.eps'],'epsc');
    LOOPCOUNT = LOOPCOUNT+1;
    PROGRESS = LOOPCOUNT/TOTALLOOPS;
    waitbar(PROGRESS,hWB,sprintf('Saving Results: %0.2f%% done...',PROGRESS*100));
    
    % Save Sensor Responsivity
    f = figure(FIGRESP);
    fname = [ctDirRes STRPREFIX 'RecvResp' CHARIDXARCHIVE];
    saveas(f,[fname '.png'],'png');
    saveas(f,[fname '.fig'],'fig');
    saveas(f,[fname '.eps'],'epsc');
    LOOPCOUNT = LOOPCOUNT+1;
    PROGRESS = LOOPCOUNT/TOTALLOOPS;
    waitbar(PROGRESS,hWB,sprintf('Saving Results: %0.2f%% done...',PROGRESS*100));
    
    % Save SPDs
    f = figure(FIGCCT);
    fname = [ctDirRes STRPREFIX 'SPDs' CHARIDXARCHIVE];
    saveas(f,[fname '.png'],'png');
    saveas(f,[fname '.fig'],'fig');
    saveas(f,[fname '.eps'],'epsc');
    LOOPCOUNT = LOOPCOUNT+1;
    PROGRESS = LOOPCOUNT/TOTALLOOPS;
    waitbar(PROGRESS,hWB,sprintf('Saving Results: %0.2f%% done...',PROGRESS*100));
    
    % Save BER vs SNR
    for iT = 1:LENCCT
        for iNSC = 1:LENMODNSC
            STRCCT = sprintf('%dK_Nsc%d',RNGCCT(iT),RNGMODNSC(iNSC));
            f = figure(FIGBER(iT,iNSC));
            fname = [ctDirRes STRPREFIX 'BERvsSNR_' STRCCT CHARIDXARCHIVE];
            saveas(f,[fname '.png'],'png');
            saveas(f,[fname '.fig'],'fig');
            saveas(f,[fname '.eps'],'epsc');
            
            LOOPCOUNT = LOOPCOUNT+1;
            PROGRESS = LOOPCOUNT/TOTALLOOPS;
            waitbar(PROGRESS,hWB,sprintf('Saving Results: %0.2f%% done...',PROGRESS*100));
        end
    end
end
delete(hWB);
catch ex
delete(hWB);
%% restore defaults
set(0,'DefaultLineMarkerSize',dlinems);
set(0,'DefaultLineLineWidth',dlinelw);
set(0,'DefaultAxesFontName',daxesfontname);
% set(0,'DefaultAxesFontSize',daxesfontsize);
set(0,'DefaultFigureVisible',dfigvis);
set(0,'DefaultFigurePaperPosition',dfigpp);
set(0,'DefaultFigurePaperUnits',dfigpu);
set(0,'DefaultFigurePaperPositionMode',dfigppm);
rethrow(ex);
end
%% restore defaults
set(0,'DefaultLineMarkerSize',dlinems);
set(0,'DefaultLineLineWidth',dlinelw);
set(0,'DefaultAxesFontName',daxesfontname);
% set(0,'DefaultAxesFontSize',daxesfontsize);
set(0,'DefaultFigureVisible',dfigvis);
set(0,'DefaultFigurePaperPosition',dfigpp);
set(0,'DefaultFigurePaperUnits',dfigpu);
set(0,'DefaultFigurePaperPositionMode',dfigppm);

end