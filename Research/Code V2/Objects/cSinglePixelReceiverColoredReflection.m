classdef cSinglePixelReceiverColoredReflection < cSinglePixelReceiver
    % cSinglePixelReceiverColoredReflection: Class to handle a single
    % pixel optical receiver where the PSD incideent at each location
    % specified is different due to colored reflections
    
    %% Class methods
    methods
        function obj = cSinglePixelReceiverColoredReflection(o1,o2,o3)
            % cSinglePixelReceiver(Xr,Yr,Zr): Class constructor
            % cSinglePixelReceiver(cLocation): Class constructor
            % -INPUT-
            % Xr,Yr,Zr: X,Y,Z coord of receiver locations. Default (0,0,0)
            obj = obj@cSinglePixelReceiver(o1,o2,o3);
        end
    
        function varargout = getSignal(varargin)
            % function [Isig Iamb]= getSignal(rxPSD,ambPSD) 
            % calculates and returns current generated by the
            % incident irradiance
            % -INPUT-
            % psd: incident power spectral density (cPSD)
            %
            % -OUTPUT-
            % Isig: current generated by the incident irradiance
            obj = varargin{1};
            rxPSD = varargin{2};
            if ~isa(rxPSD,'cPSD')
                error('Input argument must be of type ''cPSD''');
            end
            nR = obj.rxCount;
            nT = size(rxPSD,2);
            Isig = zeros(nR,1);
            A = obj.sensor.dimension.A;
            G = obj.optics.gain;
            for iR = 1:nR
                psd = rxPSD(iR,1);
                for iT = 2:nT
                    psd = psd + rxPSD(iR,iT);
                end
                Pl = psd.rdFlux;
                psdF = (psd.npsd).*(obj.sensor.filter);
                Inm = psdF.*(obj.sensor.responsivity);
                Isig(iR) = Pl*A*G*Inm.getIntegral();
            end
            varargout{1} = Isig;
            if nargin > 2
                ambPSD = varargin{3};
                Iamb = obj.getSignal(ambPSD);
                varargout{2} = Iamb;
            end
        end
    end
end





































