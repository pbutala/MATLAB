classdef cSinglePixelReceiverWhiteReflection < cSinglePixelReceiver
    % cSinglePixelReceiverWhiteReflection: Class to handle a single pixel 
    % optical receiver where the PSD incident at each locaiton specified is
    % same due to white reflection
    
    %% Class methods
    methods
        function obj = cSinglePixelReceiverWhiteReflection(o1,o2,o3)
            % cSinglePixelReceiver(Xr,Yr,Zr): Class constructor
            % cSinglePixelReceiver(cLocation): Class constructor
            % -INPUT-
            % Xr,Yr,Zr: X,Y,Z coord of receiver locations. Default (0,0,0)
             obj = obj@cSinglePixelReceiver(o1,o2,o3);
        end
    end
    
    %% Overloaded methods
    methods
%         function [Isig Iamb]= getSignal(obj,rxPSD,rxH,ambPSD)
        function varargout = getSignal(varargin)
            % [Isig Iamb]= getSignal(rxPSD,rxH,ambPSD) 
            % Isig = getSignal(rxPSD,rxH)
            % Isig = getSignal(rxPSD)
            % calculates and returns current generated by the
            % incident irradiance
            % -INPUT-
            % psd: incident power spectral density (cPSD)
            %
            % -OUTPUT-
            % Isig: current generated by the incident irradiance
            rxH = 1;
            for i=1:1:nargin
                switch i
                    case 1
                        obj = varargin{1};
                    case 2
                        rxPSD = varargin{2};
                    case 3 
                        rxH = varargin{3};
                    case 4
                        ambPSD = varargin{4};
                end
            end
            if ~isa(rxPSD,'cPSD')
                error('Input argument must be of type ''cPSD''');
            end
            A = obj.sensor.dimension.A;
            G = obj.optics.gain;
            for iS = 1:numel(rxPSD)
                psd = rxPSD(iS);
                Pl = psd.rdFlux*rxH(:,:,:,iS);
                psdF = psd.npsd.*obj.sensor.filter;
                Inm = psdF.*obj.sensor.responsivity;
                Isig(:,:,:,iS) = Pl*A*G*Inm.getIntegral();
            end
            varargout{1} = Isig;
            
            if nargout > 1
                if exist('ambPSD','var')
                    Iamb = obj.getSignal(ambPSD);
                else
                    Iamb = [];
                end
                varargout{2} = Iamb;
            end
        end
    end
end